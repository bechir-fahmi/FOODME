// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Platform.ReferentialData.EntityFramework;

#nullable disable

namespace Platform.ReferentialData.EntityFramework.Migrations
{
    [DbContext(typeof(ReferentialDataContext))]
    [Migration("20230919104453_FixTagRegressions")]
    partial class FixTagRegressions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Brand.ViewAll",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Brand.View",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Aggregator.ViewAll",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Aggregator.View",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.UserManagement.View",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.UserManagement.Update",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.UserManagement.Delete",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Offers.ViewAll",
                            RoleId = "5310d489-98d2-416e-bbf4-7badc5197f73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Security");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.AgeRangeData.AgeRangeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AgeRange");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.AuthenticationEntity", b =>
                {
                    b.Property<Guid>("AuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIkey")
                        .HasColumnType("text");

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("AuthenticationId");

                    b.ToTable("IntegrationAuthentication");

                    b.HasData(
                        new
                        {
                            AuthenticationId = new Guid("0efd66e7-f5ad-42a5-928c-241c4cb71ae4"),
                            APIkey = "",
                            AuthenticationType = 0,
                            Login = "",
                            Password = "",
                            Token = ""
                        },
                        new
                        {
                            AuthenticationId = new Guid("0efd66e7-e4ad-42a5-928c-241c4cb71ae4"),
                            APIkey = "",
                            AuthenticationType = 0,
                            Login = "",
                            Password = "",
                            Token = ""
                        },
                        new
                        {
                            AuthenticationId = new Guid("16ce9df4-a1a3-4e3e-80cd-49be1d3f6913"),
                            APIkey = "",
                            AuthenticationType = 1,
                            Login = "admin",
                            Password = "password",
                            Token = ""
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.DynamicIntegrationEntity", b =>
                {
                    b.Property<Guid>("DynamicIntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthenticationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Port")
                        .HasColumnType("text");

                    b.Property<string>("URi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("http")
                        .HasColumnType("text");

                    b.HasKey("DynamicIntegrationId");

                    b.HasIndex("AuthenticationId");

                    b.HasIndex("VendorId");

                    b.ToTable("DynamicIntegration");

                    b.HasData(
                        new
                        {
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a12-a795-33004abb1bd8"),
                            AuthenticationId = new Guid("16ce9df4-a1a3-4e3e-80cd-49be1d3f6913"),
                            Port = "3004",
                            URi = "localhost",
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            http = "http"
                        },
                        new
                        {
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a17-a795-33004acc1bd8"),
                            AuthenticationId = new Guid("0efd66e7-f5ad-42a5-928c-241c4cb71ae4"),
                            Port = "3004",
                            URi = "localhost",
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            http = "http"
                        },
                        new
                        {
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a17-a000-33004abb1bd8"),
                            AuthenticationId = new Guid("0efd66e7-e4ad-42a5-928c-241c4cb71ae4"),
                            Port = "3004",
                            URi = "localhost",
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            http = "http"
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.Integration.BrandMatchingEntity", b =>
                {
                    b.Property<Guid>("AggregatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocalBrandId")
                        .HasColumnType("uuid");

                    b.Property<int>("DistantBrandId")
                        .HasColumnType("integer");

                    b.HasKey("AggregatorId", "LocalBrandId");

                    b.ToTable("BrandMatching");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.IntegrationBrand.StaticIntegrationEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Fees")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("StaticIntegrationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TimeEstimation")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("StaticIntegration");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.TagVendorEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("TagVendor");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.DeliveryModeData.DeliveryModeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageLabelCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Name = "Delivery",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1be9"),
                            Name = "Carhop",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1be9"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.FoodTypeData.FoodTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageLabelCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("FoodType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4ce"),
                            Name = "Fish",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            LanguageResourceSetId = new Guid("13488271-3653-41a0-9287-dc65ab6d2d7e"),
                            Name = "Pizza",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        },
                        new
                        {
                            Id = 3,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            LanguageResourceSetId = new Guid("310363c2-3044-47c7-81ea-fababb60d3dc"),
                            Name = "Meat",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.FoodTypeData.TagFoodTypeEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "FoodTypeId");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("TagFoodType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.IntegrationMethodEntity", b =>
                {
                    b.Property<Guid>("IntegrationMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthenticationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Content")
                        .HasColumnType("integer");

                    b.Property<Guid>("DynamicIntegrationId")
                        .HasColumnType("uuid");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("integer");

                    b.Property<int>("MethodType")
                        .HasColumnType("integer");

                    b.Property<bool>("UseDefaultAuth")
                        .HasColumnType("boolean");

                    b.HasKey("IntegrationMethodId");

                    b.HasIndex("AuthenticationId");

                    b.HasIndex("DynamicIntegrationId");

                    b.ToTable("IntegrationMethod");

                    b.HasData(
                        new
                        {
                            IntegrationMethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            AuthenticationId = new Guid("16ce9df4-a1a3-4e3e-80cd-49be1d3f6913"),
                            Content = 0,
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a12-a795-33004abb1bd8"),
                            EndPoint = "SecureApi/KFC/deliveryInfo",
                            IntegrationType = 0,
                            MethodType = 1,
                            UseDefaultAuth = true
                        },
                        new
                        {
                            IntegrationMethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            AuthenticationId = new Guid("0efd66e7-f5ad-42a5-928c-241c4cb71ae4"),
                            Content = 0,
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a17-a795-33004acc1bd8"),
                            EndPoint = "NotsecureApi/Magma/deliveryInfo",
                            IntegrationType = 0,
                            MethodType = 1,
                            UseDefaultAuth = true
                        },
                        new
                        {
                            IntegrationMethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            AuthenticationId = new Guid("0efd66e7-e4ad-42a5-928c-241c4cb71ae4"),
                            Content = 0,
                            DynamicIntegrationId = new Guid("ce646e7d-e154-4a17-a000-33004abb1bd8"),
                            EndPoint = "NotsecureApi/chikeNDip/deliveryInfo",
                            IntegrationType = 0,
                            MethodType = 1,
                            UseDefaultAuth = true
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.IntegrationParameterEntity", b =>
                {
                    b.Property<Guid>("IntegrationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MatchWithKey")
                        .HasColumnType("integer");

                    b.Property<int>("MatchWithValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<int>("QueryOrBody")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("IntegrationParameterId");

                    b.HasIndex("MethodId");

                    b.ToTable("IntegrationParameter");

                    b.HasData(
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f034566c692d"),
                            Key = "Latitude",
                            MatchWithKey = 5,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 0
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f034566c693c"),
                            Key = "Longitude",
                            MatchWithKey = 6,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 0
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-50ee-ae67-f034566c692d"),
                            Key = "TimeEstimation",
                            MatchWithKey = 10,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-51ee-ae67-f034566c692d"),
                            Key = "Fees",
                            MatchWithKey = 9,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-52ee-ae67-f034566c692d"),
                            Key = "Rating",
                            MatchWithKey = 8,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-53ee-ae67-f034566c692d"),
                            Key = "Distance",
                            MatchWithKey = 7,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-54ee-ae67-f034566c692d"),
                            Key = "Aggregator",
                            MatchWithKey = 11,
                            MatchWithValue = 0,
                            MethodId = new Guid("623320f2-e01d-42ad-a5fb-d56cb3448a38"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c692d"),
                            Key = "DeliveryZone",
                            MatchWithKey = 0,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 0
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c0285"),
                            Key = "TimeEstimation",
                            MatchWithKey = 10,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c654d"),
                            Key = "Fees",
                            MatchWithKey = 9,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c4782"),
                            Key = "Rating",
                            MatchWithKey = 8,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c9633"),
                            Key = "Distance",
                            MatchWithKey = 7,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c200d"),
                            Key = "Aggregator",
                            MatchWithKey = 11,
                            MatchWithValue = 0,
                            MethodId = new Guid("2e635561-5ebb-4774-b9dd-8a6603153990"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c198d"),
                            Key = "DeliveryZone",
                            MatchWithKey = 0,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 0
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c1745"),
                            Key = "TimeEstimation",
                            MatchWithKey = 10,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c166d"),
                            Key = "Fees",
                            MatchWithKey = 9,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c1012"),
                            Key = "Rating",
                            MatchWithKey = 8,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c1103"),
                            Key = "Distance",
                            MatchWithKey = 7,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 1
                        },
                        new
                        {
                            IntegrationParameterId = new Guid("0127afbd-ade2-49ee-ae67-f038866c100d"),
                            Key = "Aggregator",
                            MatchWithKey = 11,
                            MatchWithValue = 0,
                            MethodId = new Guid("b5204c9b-cfd7-431b-9dfa-3c373e92fa89"),
                            QueryOrBody = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.KitchenTypeData.KitchenTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageLabelCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("KitchenType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-667e-a9d44449f4ca"),
                            Name = "American",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            LanguageResourceSetId = new Guid("088ae5f8-6bd2-4ee2-777e-a9d44449f4ca"),
                            Name = "Italian",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        },
                        new
                        {
                            Id = 3,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-777e-a9d44449f4ef"),
                            Name = "Indian",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.KitchenTypeData.TagKitchenTypeEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("KitchenTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "KitchenTypeId");

                    b.HasIndex("KitchenTypeId");

                    b.ToTable("TagKitchenType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageData.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("isDefault")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageData.LanguageResourceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageKey")
                        .HasColumnType("integer");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("LanguageResource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4ce"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4ce"),
                            Status = 5,
                            Value = "Fish"
                        },
                        new
                        {
                            Id = 2,
                            Code = new Guid("13488271-3653-41a0-9287-dc65ab6d2d7e"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("13488271-3653-41a0-9287-dc65ab6d2d7e"),
                            Status = 5,
                            Value = "Pizza"
                        },
                        new
                        {
                            Id = 3,
                            Code = new Guid("310363c2-3044-47c7-81ea-fababb60d3dc"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("310363c2-3044-47c7-81ea-fababb60d3dc"),
                            Status = 5,
                            Value = "Meat"
                        },
                        new
                        {
                            Id = 4,
                            Code = new Guid("310363c2-3044-47c7-81ea-fababb60d3dc"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("3ee5766a-af6a-436b-b588-b9ef645867f0"),
                            Status = 5,
                            Value = "Family Meal"
                        },
                        new
                        {
                            Id = 5,
                            Code = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Status = 5,
                            Value = "Happy Meal"
                        },
                        new
                        {
                            Id = 6,
                            Code = new Guid("d2ab81c5-b9b3-4b14-827e-d24da57d6ff4"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-4b14-827e-d24da57d6ff4"),
                            Status = 5,
                            Value = "BreakFast"
                        },
                        new
                        {
                            Id = 7,
                            Code = new Guid("e5a05881-856c-4453-99b2-74222677ceb7"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("e5a05881-856c-4453-99b2-74222677ceb7"),
                            Status = 5,
                            Value = "Lunch"
                        },
                        new
                        {
                            Id = 8,
                            Code = new Guid("ef192566-67d7-4f85-b724-f8163019723a"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("ef192566-67d7-4f85-b724-f8163019723a"),
                            Status = 5,
                            Value = "Dinner"
                        },
                        new
                        {
                            Id = 9,
                            Code = new Guid("074be5f8-6bd2-4ee2-667e-a9d44449f4ca"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-667e-a9d44449f4ca"),
                            Status = 5,
                            Value = "American"
                        },
                        new
                        {
                            Id = 10,
                            Code = new Guid("099ae5f8-6bd2-4ee2-777e-a9d44449f4ea"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("088ae5f8-6bd2-4ee2-777e-a9d44449f4ca"),
                            Status = 5,
                            Value = "Italian"
                        },
                        new
                        {
                            Id = 11,
                            Code = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4ca"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-777e-a9d44449f4ef"),
                            Status = 5,
                            Value = "Indian"
                        },
                        new
                        {
                            Id = 12,
                            Code = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4fe"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4fe"),
                            Status = 5,
                            Value = "Jeddah"
                        },
                        new
                        {
                            Id = 13,
                            Code = new Guid("099ae5f7-6bd2-4ee2-887e-a9d44449f4f0"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae5f7-6bd2-4ee2-887e-a9d44449f4f0"),
                            Status = 5,
                            Value = "Riadh"
                        },
                        new
                        {
                            Id = 14,
                            Code = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae7f8-6bd2-4ee2-887e-a9d44449f413"),
                            Status = 5,
                            Value = "Jeddah saudi arabia"
                        },
                        new
                        {
                            Id = 15,
                            Code = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("099ae6f8-6bd2-4ee2-887e-a9d44449f414"),
                            Status = 5,
                            Value = "Riadh saudi arabia"
                        },
                        new
                        {
                            Id = 16,
                            Code = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff7"),
                            Status = 5,
                            Value = "Jeddah saudi arabia"
                        },
                        new
                        {
                            Id = 17,
                            Code = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Description = "",
                            LanguageKey = 1,
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff8"),
                            Status = 5,
                            Value = "Riadh saudi arabia"
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", b =>
                {
                    b.Property<Guid>("LanguageResourceSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("LanguageResourceSetId");

                    b.ToTable("LanguageResourceSet");

                    b.HasData(
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4ce"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("13488271-3653-41a0-9287-dc65ab6d2d7e"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("310363c2-3044-47c7-81ea-fababb60d3dc"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("3ee5766a-af6a-436b-b588-b9ef645867f0"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-4b14-827e-d24da57d6ff4"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("e5a05881-856c-4453-99b2-74222677ceb7"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("ef192566-67d7-4f85-b724-f8163019723a"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-667e-a9d44449f4ca"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("088ae5f8-6bd2-4ee2-777e-a9d44449f4ca"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-777e-a9d44449f4ef"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4fe"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae5f7-6bd2-4ee2-887e-a9d44449f4f0"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae7f8-6bd2-4ee2-887e-a9d44449f413"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("099ae6f8-6bd2-4ee2-887e-a9d44449f414"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff7"),
                            Status = 5
                        },
                        new
                        {
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff8"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.AreaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaName = "",
                            CityId = 1,
                            Latitude = 856.25400000000002,
                            Longitude = 104.258,
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            AreaName = "",
                            CityId = 2,
                            Latitude = 745.25599999999997,
                            Longitude = 201.589,
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CityCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.HasIndex("RegionId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityCode = "Jeddah saudi arabia",
                            LanguageResourceSetId = new Guid("099ae5f8-6bd2-4ee2-887e-a9d44449f4fe"),
                            Latitude = 856.25400000000002,
                            Longitude = 104.256,
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            RegionId = 1,
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            CityCode = "Riadh saudi arabia",
                            LanguageResourceSetId = new Guid("099ae5f7-6bd2-4ee2-887e-a9d44449f4f0"),
                            Latitude = 745.25599999999997,
                            Longitude = 201.589,
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            RegionId = 2,
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "sao",
                            CountryKey = "sao",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff7"),
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-6b14-827e-d24da57d6ff8"),
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTimingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageLabelCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("MealTiming");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            LanguageResourceSetId = new Guid("d2ab81c5-b9b3-4b14-827e-d24da57d6ff4"),
                            Name = "BreakFast",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            LanguageResourceSetId = new Guid("e5a05881-856c-4453-99b2-74222677ceb7"),
                            Name = "Lunch",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        },
                        new
                        {
                            Id = 3,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            LanguageResourceSetId = new Guid("ef192566-67d7-4f85-b724-f8163019723a"),
                            Name = "Dinner",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd7"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ImageLabelCode")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("MealType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            LanguageResourceSetId = new Guid("3ee5766a-af6a-436b-b588-b9ef645867f0"),
                            Name = "Family Meal",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            ImageLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            LanguageResourceSetId = new Guid("48178984-0325-469a-a611-6c29c5610f13"),
                            Name = "Happy Meal",
                            NameLabelCode = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd9"),
                            Status = 5
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.TagMealTimingEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("MealTimingId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "MealTimingId");

                    b.HasIndex("MealTimingId");

                    b.ToTable("TagMealTiming");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.TagMealTypeEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "MealTypeId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("TagMealType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.OfferData.OfferEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandOfferLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FacebookOfferLink")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("InstagramOfferLink")
                        .HasColumnType("text");

                    b.Property<Guid?>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TwitterOfferLink")
                        .HasColumnType("text");

                    b.Property<string>("VendorId")
                        .HasColumnType("text");

                    b.Property<int>("VendorType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.OfferData.TagOfferEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "OfferId");

                    b.HasIndex("OfferId");

                    b.ToTable("TagOffer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.SupportService.QuestionAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AnswerLabelCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SuportCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuportCategoryId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.SupportService.SuportCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HelpSupportType")
                        .HasColumnType("integer");

                    b.Property<Guid>("Image")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SuportCategory");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.SupportService.TermsServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TermsService");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagCityEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("TagCity");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagData.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagLanguageEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("TagLanguage");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagRegionEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("TagRegion");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagZoneEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("TagId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("TagZone");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Theme.ThemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ThemeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserAddressData.UserAddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AddressLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FullAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserAddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresse");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserAddressData.UserAddressTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageResourceSetId");

                    b.ToTable("UserAddressType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("text");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "Security");

                    b.HasData(
                        new
                        {
                            Id = "8f1e9ce9-ab8c-4aaf-958b-596b88dc6684",
                            ConcurrencyStamp = "5ab7155b-c3a4-44a1-a692-f9f79882d729",
                            CreationTime = new DateTime(2023, 9, 19, 10, 44, 52, 182, DateTimeKind.Utc).AddTicks(7639),
                            CreatorUserId = "No User",
                            Name = "ADMINISTRATOR",
                            NormalizedName = "ADMINISTRATOR",
                            Status = 0
                        },
                        new
                        {
                            Id = "5310d489-98d2-416e-bbf4-7badc5197f73",
                            ConcurrencyStamp = "5ab70136-8160-4611-afab-a47845f2cf7d",
                            CreationTime = new DateTime(2023, 9, 19, 10, 44, 52, 182, DateTimeKind.Utc).AddTicks(7659),
                            CreatorUserId = "No User",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<int>("AuthentificationSource")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("text");

                    b.Property<string>("DeleterUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FCMToken")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifierUserId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NumberOfOperation")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RejectTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResetCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetCodeExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("text");

                    b.Property<string>("lastActiveDate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", "Security");

                    b.HasData(
                        new
                        {
                            Id = "6bf1ea57-1d07-4e8f-97d4-2b3c050a979f",
                            AccessFailedCount = 0,
                            AuthentificationSource = 0,
                            ConcurrencyStamp = "2c92f94f-3347-477f-9255-66486a50faa1",
                            CreationTime = new DateTime(2023, 9, 19, 10, 44, 52, 182, DateTimeKind.Utc).AddTicks(8874),
                            CreatorUserId = "No User",
                            Email = "mail.foodme@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAIL.FOODME@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAENUQI0+8hklrZphQ23S9UIoLW4u0Vl2p8KmHUEEPlcETjw2nBxKwoEu8tj2L7bSOOg==",
                            PhoneNumber = "515553891",
                            PhoneNumberConfirmed = false,
                            Picture = "",
                            SecurityStamp = "45858135-923d-4d12-8f55-2f6155dc0102",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserOTPVerificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("OTPVerificationCode")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOTPVerification", "Security");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserRoleEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Security");

                    b.HasData(
                        new
                        {
                            UserId = "6bf1ea57-1d07-4e8f-97d4-2b3c050a979f",
                            RoleId = "8f1e9ce9-ab8c-4aaf-958b-596b88dc6684"
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorDeliveryModeEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryModeId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "DeliveryModeId");

                    b.HasIndex("DeliveryModeId");

                    b.ToTable("VendorDeliveryMode");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            DeliveryModeId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            DeliveryModeId = 1
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            DeliveryModeId = 1
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorDeliveryZonesEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("VendorDeliveryZones");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            ZoneId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            ZoneId = 1
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            ZoneId = 1
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdminScore")
                        .HasColumnType("integer");

                    b.Property<string>("AndLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IOSLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebLink")
                        .HasColumnType("text");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            AdminScore = 0,
                            AndLink = "",
                            Description = "kfc saudi from saudi.kfc.me\r\nOrder great tasting fried chicken, sandwiches & family meals online with KFC Delivery. ",
                            IOSLink = "",
                            Logo = "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",
                            Name = "KFC",
                            OtherDescription = "Attractive combos & deals available from our menu for a 'so good' ",
                            Status = 0,
                            Type = 0,
                            WebLink = "https://saudi.kfc.me/en/home"
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            AdminScore = 0,
                            AndLink = "",
                            Description = "MAGMA is proud to offer you a refined cuisine that combines the excellence of French gastronomy with the Japanese culinary techniques of its chef, Ryuya ONO. ",
                            IOSLink = "",
                            Logo = "",
                            Name = "Magma",
                            OtherDescription = "At MAGMA, we work closely with carefully selected premium French producers. Our menu evolves daily based on the day's arrivals, where surprise and discovery are integral parts of your visit to MAGMA. ",
                            Status = 0,
                            Type = 0,
                            WebLink = "https://restaurantmagma.com/en/"
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            AdminScore = 0,
                            AndLink = "",
                            Description = "Looking for Chick-N-Dip delivery? Take a look at the menus and lists",
                            IOSLink = "",
                            Logo = "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",
                            Name = "ChikNDip",
                            OtherDescription = "order what you need and get it delivered to you. Ready, steady",
                            Status = 0,
                            Type = 0,
                            WebLink = "https://www.facebook.com/chickndipksa/"
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorFoodTypeEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "FoodTypeId");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("VendorFoodType");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            FoodTypeId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            FoodTypeId = 2
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            FoodTypeId = 3
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorKitchenTypeEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("KitchenTypeId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "KitchenTypeId");

                    b.HasIndex("KitchenTypeId");

                    b.ToTable("VendorKitchenType");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            KitchenTypeId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            KitchenTypeId = 2
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            KitchenTypeId = 3
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorMealTimingEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("MealTimingId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "MealTimingId");

                    b.HasIndex("MealTimingId");

                    b.ToTable("VendorMealTiming");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            MealTimingId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            MealTimingId = 2
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            MealTimingId = 3
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorMealTypeEntity", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("integer");

                    b.HasKey("VendorId", "MealTypeId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("VendorMealType");

                    b.HasData(
                        new
                        {
                            VendorId = new Guid("ce748e7d-e307-4a12-a795-33004abb1bd8"),
                            MealTypeId = 1
                        },
                        new
                        {
                            VendorId = new Guid("3a7b3888-9b89-459a-a108-e06aefec5500"),
                            MealTypeId = 2
                        },
                        new
                        {
                            VendorId = new Guid("ce646e7d-e307-4a12-a795-33004abb1bd8"),
                            MealTypeId = 2
                        });
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ClenderWorkingTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ClenderWorkingTime");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.DayWorkingTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AfterNoonCloseTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("AfterNoonStartTime")
                        .HasColumnType("interval");

                    b.Property<int?>("ClenderWorkingTimeEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("MorningCloseTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("MorningStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ClenderWorkingTimeEntityId");

                    b.ToTable("DayWorkingTime");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ExceptionDayWorkingTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AfterNoonCloseTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("AfterNoonStartTime")
                        .HasColumnType("interval");

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<int?>("ExceptionWeekWorkingTimeEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("MorningCloseTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("MorningStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionWeekWorkingTimeEntityId");

                    b.ToTable("ExceptionDayWorkingTime");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ExceptionWeekWorkingTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClenderWorkingTimeEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("DeActivated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DescriptionLabelCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NameLabelCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClenderWorkingTimeEntityId");

                    b.ToTable("ExceptionWeekWorkingTime");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.ZoneEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LanguageResourceSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifierUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageResourceSetId");

                    b.HasIndex("RegionId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            CityId = 1,
                            CountryId = 1,
                            LanguageResourceSetId = new Guid("099ae7f8-6bd2-4ee2-887e-a9d44449f413"),
                            Name = "Jeddah Saudi Arabia",
                            RegionId = 1,
                            Status = 5
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 2,
                            CityId = 2,
                            CountryId = 1,
                            LanguageResourceSetId = new Guid("099ae6f8-6bd2-4ee2-887e-a9d44449f414"),
                            Name = "Riadh Saudi Arabia",
                            RegionId = 2,
                            Status = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.DynamicIntegrationEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.BrandData.AuthenticationEntity", "Authentication")
                        .WithMany()
                        .HasForeignKey("AuthenticationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("DynamicIntegrations")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authentication");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.IntegrationBrand.StaticIntegrationEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("StaticIntegrations")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.ZoneEntity", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorModel");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.TagVendorEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.FoodTypeData.FoodTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.FoodTypeData.TagFoodTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.FoodTypeData.FoodTypeEntity", "FoodType")
                        .WithMany("Tags")
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.IntegrationMethodEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.BrandData.AuthenticationEntity", "Authentication")
                        .WithMany()
                        .HasForeignKey("AuthenticationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.BrandData.DynamicIntegrationEntity", "DynamicIntegration")
                        .WithMany("IntegrationMethod")
                        .HasForeignKey("DynamicIntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authentication");

                    b.Navigation("DynamicIntegration");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.IntegrationParameterEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.IntegrationMethodEntity", "Method")
                        .WithMany("IntegrationParameters")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.KitchenTypeData.KitchenTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.KitchenTypeData.TagKitchenTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.KitchenTypeData.KitchenTypeEntity", "KitchenType")
                        .WithMany("Tags")
                        .HasForeignKey("KitchenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitchenType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageData.LanguageResourceEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageData.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany("LanguageRessource")
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.AreaEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.CityEntity", "CityFK")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityFK");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.CityEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.RegionEntity", "RegionFk")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageResourceSet");

                    b.Navigation("RegionFk");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.RegionEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.CountryEntity", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryFk");

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTimingEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.TagMealTimingEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.MealData.MealTimingEntity", "MealTiming")
                        .WithMany("Tags")
                        .HasForeignKey("MealTimingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealTiming");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.TagMealTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.MealData.MealTypeEntity", "MealType")
                        .WithMany("Tags")
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealType");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.OfferData.OfferEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId");

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.OfferData.TagOfferEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.OfferData.OfferEntity", "Offer")
                        .WithMany("Tags")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.SupportService.QuestionAnswerEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.SupportService.SuportCategoryEntity", "SuportCategoryFk")
                        .WithMany()
                        .HasForeignKey("SuportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuportCategoryFk");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagCityEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.CityEntity", "City")
                        .WithMany("Tags")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagLanguageEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageData.LanguageEntity", "Language")
                        .WithMany("Tags")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagRegionEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.RegionEntity", "Region")
                        .WithMany("Tags")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.TagZoneEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.ZoneEntity", "Zone")
                        .WithMany("Tags")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserAddressData.UserAddressEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserAddressData.UserAddressTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId");

                    b.Navigation("LanguageResourceSet");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserEntity", b =>
                {
                    b.OwnsMany("Platform.ReferentialData.DataModel.UserData.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserEntityId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseSerialColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.HasKey("UserEntityId", "Id");

                            b1.ToTable("RefreshToken", "Security");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserOTPVerificationEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserRoleEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.UserData.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.UserData.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorDeliveryModeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.DeliveryModeData.DeliveryModeEntity", "DeliveryMode")
                        .WithMany()
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("VendorDeliverys")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMode");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorDeliveryZonesEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("Zones")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.ZoneEntity", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorModel");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorFoodTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.FoodTypeData.FoodTypeEntity", "FoodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("VendorFoodTypes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorKitchenTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.KitchenTypeData.KitchenTypeEntity", "KitchenType")
                        .WithMany()
                        .HasForeignKey("KitchenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("VendorKitchenTypes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitchenType");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorMealTimingEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.MealData.MealTimingEntity", "MealTiming")
                        .WithMany()
                        .HasForeignKey("MealTimingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("VendorMealTimings")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealTiming");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorMealTypeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.MealData.MealTypeEntity", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.VendorEntity", "VendorModel")
                        .WithMany("VendorMealTypes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealType");

                    b.Navigation("VendorModel");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.DayWorkingTimeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.WorkingTime.ClenderWorkingTimeEntity", "ClenderWorkingTimeEntity")
                        .WithMany("UsualDailyWorkingTimes")
                        .HasForeignKey("ClenderWorkingTimeEntityId");

                    b.Navigation("ClenderWorkingTimeEntity");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ExceptionDayWorkingTimeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.WorkingTime.ExceptionWeekWorkingTimeEntity", "ExceptionWeekWorkingTimeEntity")
                        .WithMany("ExceptionalDailyWorkingTimes")
                        .HasForeignKey("ExceptionWeekWorkingTimeEntityId");

                    b.Navigation("ExceptionWeekWorkingTimeEntity");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ExceptionWeekWorkingTimeEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.WorkingTime.ClenderWorkingTimeEntity", "ClenderWorkingTimeEntity")
                        .WithMany("ExceptionalWeekyWorkingTimes")
                        .HasForeignKey("ClenderWorkingTimeEntityId");

                    b.Navigation("ClenderWorkingTimeEntity");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.ZoneEntity", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.AreaEntity", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", "LanguageResourceSet")
                        .WithMany()
                        .HasForeignKey("LanguageResourceSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.LocationData.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("LanguageResourceSet");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.BrandData.DynamicIntegrationEntity", b =>
                {
                    b.Navigation("IntegrationMethod");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.FoodTypeData.FoodTypeEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.IntegrationMethodEntity", b =>
                {
                    b.Navigation("IntegrationParameters");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.KitchenTypeData.KitchenTypeEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageData.LanguageEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LanguageResourceSetEntity", b =>
                {
                    b.Navigation("LanguageRessource");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.CityEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.LocationData.RegionEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTimingEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.MealData.MealTypeEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.OfferData.OfferEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.UserData.UserEntity", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.VendorEntity", b =>
                {
                    b.Navigation("DynamicIntegrations");

                    b.Navigation("StaticIntegrations");

                    b.Navigation("VendorDeliverys");

                    b.Navigation("VendorFoodTypes");

                    b.Navigation("VendorKitchenTypes");

                    b.Navigation("VendorMealTimings");

                    b.Navigation("VendorMealTypes");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ClenderWorkingTimeEntity", b =>
                {
                    b.Navigation("ExceptionalWeekyWorkingTimes");

                    b.Navigation("UsualDailyWorkingTimes");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.WorkingTime.ExceptionWeekWorkingTimeEntity", b =>
                {
                    b.Navigation("ExceptionalDailyWorkingTimes");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.ZoneEntity", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
